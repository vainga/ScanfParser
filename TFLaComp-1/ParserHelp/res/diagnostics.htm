<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<meta name="GENERATOR" content="Microsoft&reg; HTML Help Workshop 4.1">
<Title>Диагностика и нейтрализация ошибок</Title>
</HEAD>
<BODY>

<h1>Диагностика и нейтрализация ошибок в разборе scanf</h1>

<h2>Метод Айронса</h2>
<p>Метод Айронса — это подход к обработке синтаксических ошибок при разборе вызовов scanf, при котором анализатор не останавливается при обнаружении ошибки, а пытается локализовать проблемный участок и продолжить разбор, обойдя ошибочную часть.</p>

<h2>Токенизация входной строки</h2>
<p>Исходная строка разбивается на следующие токены:</p>
<ul>
    <li>Ключевое слово <code>"scanf"</code></li>
    <li>Скобки <code>"("</code> и <code>")"</code></li>
    <li>Строка формата в кавычках <code>""</code></li>
    <li>Спецификаторы (<code>%d</code>, <code>%f</code> и др.)</li>
    <li>Амперсанды <code>&</code> перед переменными</li>
    <li>Имена переменных</li>
    <li>Разделители (запятые <code>,</code> и точки с запятой <code>;</code>)</li>
</ul>

<h2>Методы обработки ошибок</h2>

<h3>1. Удаление символов</h3>
<p>Пропуск некорректных токенов с продолжением анализа со следующей позиции:</p>
<ul>
    <li>Лишние пробелы</li>
    <li>Неверные символы в строке формата</li>
    <li>Неправильные разделители</li>
</ul>

<h3>2. Добавление символов</h3>
<p>Повторный анализ текущего токена с расширенным контекстом:</p>
<ul>
    <li>Если не хватает закрывающей кавычки у строки формата</li>
    <li>Если пропущен обязательный символ (например, точка с запятой в конце)</li>
    <li>Если отсутствует амперсанд перед переменной</li>
</ul>

<h3>3. Замена символов</h3>
<p>Завершение обработки текущей синтаксической конструкции и переход к следующей части:</p>
<ul>
    <li>Завершение разбора аргументов после закрывающей скобки</li>
    <li>Переход к проверке точки с запятой</li>
    <li>Коррекция неверных спецификаторов формата</li>
</ul>

<h2>Примеры обработки ошибок</h2>

<table border="1" cellpadding="5" cellspacing="0">
    <tr>
        <th>Ошибочный ввод</th>
        <th>Действие анализатора</th>
    </tr>
    <tr>
        <td><code>scanf("%d", x);</code> (пропущен &)</td>
        <td>Добавление амперсанда: <code>&x</code></td>
    </tr>
    <tr>
        <td><code>scanf("%d", &x</code> (нет закрывающей скобки)</td>
        <td>Автоматическое добавление <code>)</code></td>
    </tr>
    <tr>
        <td><code>scanf("%z", &x);</code> (неверный спецификатор)</td>
        <td>Замена на стандартный спецификатор (например, <code>%d</code>)</td>
    </tr>
</table>

<h2>Логика восстановления после ошибок</h2>
<ol>
    <li>Обнаружение синтаксической ошибки</li>
    <li>Определение типа ошибки (пропущен, лишний или неверный символ)</li>
    <li>Применение соответствующей стратегии (удаление/добавление/замена)</li>
    <li>Продолжение анализа с корректной позиции</li>
    <li>Формирование диагностического сообщения</li>
</ol>

</BODY>
</HTML>